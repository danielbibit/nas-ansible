version: "3"

services:
    glances:
        image: nicolargo/glances
        container_name: glances
        pid: host
        network_mode: host
        environment:
            - "GLANCES_OPT=-w"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        security_opt:
            - "apparmor=unconfined"
        ports:
            - 61208:61208
            - 61209:61209
        restart: unless-stopped

    node_exporter:
        container_name: "node_exporter"
        image: "quay.io/prometheus/node-exporter:latest"
        command:
            - "--path.rootfs=/host"
        network_mode: "host"
        restart: "unless-stopped"
        volumes:
            - "/:/host:ro"

    prometheus:
        image: prom/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
        container_name: prometheus
        pid: host
        network_mode: host
        volumes:
            - /srv/Users/docker/prometheus/config:/etc/prometheus
            - /var/run/docker.sock:/var/run/docker.sock
        restart: unless-stopped


    grafana:
        image: grafana/grafana-enterprise
        container_name: grafana
        user: '1001' # TODO create docker users
        pid: host
        environment:
            - "GF_AUTH_ANONYMOUS_ENABLED=true"
        network_mode: host
        volumes:
            - /srv/Users/docker/grafana:/var/lib/grafana
        restart: unless-stopped


    cadvisor:
        image: gcr.io/google-containers/cadvisor:latest
        privileged: true
        container_name: cadvisor
        ports:
            - 8080:8080
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        command:
            - '-housekeeping_interval=10s'
            - '-docker_only=true'
        restart: "always"


    # https://cylab.be/blog/241/use-loki-to-monitor-the-logs-of-your-docker-compose-application
    # https://grafana.com/docs/grafana-cloud/quickstart/logs_promtail_linuxnode/
    loki:
        image: grafana/loki
        container_name: loki
        user: '1001' # TODO create docker users
        ports:
            - "3100:3100"
        volumes:
            - /srv/Users/docker/loki:/loki
        restart: "always"


    promtail:
        image: grafana/promtail
        container_name: promtail
        volumes:
            # custom config will read logs from the containers of
            # this project
            - /srv/Users/docker/promtail/promtail-config.yml:/etc/promtail/config.yml

            # to read container labels and logs
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker/containers:/var/lib/docker/containers
            # read system logs
            - /var/log:/var/log
        restart: "always"
